firebase-schema - Make firebase-schema.js
redux-schema - Make redux-schema.js
actions - Make actions.js file add all actions to it for now.
reducers - Make reducers.js file and add all reducers to it for now.
hello-world - Build Hello World
    - npm init -y
    - npm install --save react react-dom && npm install --save-dev html-webpack-plugin webpack webpack-dev-server babel-{core,loader} babel-preset-{react,es2015,stage-0} style-loader css-loader
    - Basic webpack.config.js with css and style loader
    - .babelrc
    - mkdir app
    - touch index.js && touch index.html
    - Fill out index.html
    - Add Hello World to index.js and render it.
    - add start and prod to package.json
react-router - Add React Router
  - npm install --save react-router
  - Make containers folder
  - Make Main folder
      - MainContainer.js and move HelloWorld code to it
  - Make index.js of containers folder
  - Make config/routes.js and fill out routes
developer-experience
  - npm -v
  - node -v
  - Eslint
    - http://standardjs.com/
    - npm install --save-dev eslint eslint-{config-standard,plugin-standard,plugin-promise}
    - Add lint to node script
    - touch .eslintrc
    - run 'npm run lint' and see errors + gross ERR! npm code.
    - Fix ^ by adding exit 0 to npm lint script
    - Notice we're not linting for React stuff
    - npm install --save-dev eslint-plugin-react
    - Add react plugin to eslintrc
    - Fill out rest of eslintrc besides rules
    - Add rules
    - Fix errors but should still be one error in index.js with exporting file
      - Mention how the export is experimental so we need to have eslint use the babel parser
      - Add npm install babel-eslint@next --save-dev
      - Add parser: "babel-eslint"
  - require('path') and PATHS object in webpack.config (take out index.js because of comment in notes about default when main in package.json)
  - Purposefully mistype a variable name and then check the error in the cosole
    - Gross index_bundle.js error.
    - Add devtool: 'eval' to webpack config and restart webpack
    - show error message again with sourcemap enabled.
    - But we don't want eval to run in production. In fact, we need to change quite a bit for prod.
  - Talk about production vs development configs. Multiple ways to do it.
  - create base, developmentConfig, and productionConfig as empty objects
  - Production Prep (test just in module.exports)
    - process.env.npm_lifecycle_event
    - isProduction variable
    - Steps with Production React
      - initial file size ~ 873kb
      - process.env.node_env to 'production' (do then show file size) ~833kb
      - devtool from 'eval' -> cheap-module-source-map (do then show file size) 179kb
      - new webpack.optimize.UglifyJsPlugin({minimize: true}) (may not be needed)
  - Add shared config to base
  - Add devtool: 'eval' to developmentConfig
  - Add devtool: 'cheap-module-source-map' to productionConfig
  - Add plugins to developmentConfig (just HTMLWebpackPlugin)
  - Add plugins to productionConfig
  - Now we need a way to merge them together
    - Change name to webpack.config.babel.js
    - Change requires to imports and vars to consts
    - Use Object.assign
    - Test it out
  - HMR
    - npm install --save-dev babel-preset-react-hmre
    - Enable babel-preset-react-hmre when were in dev mode
      - add process.env.BABEL_ENV = LAUNCH_COMMAND
      - Add hmre to .babelrc
      - Add new webpack.HotModuleReplacementPlugin() to dev config
      - add devServer to developmentConfig
      - Test it out by changing Hello World
      - Add a styles.css file and test it out with styles
      - Add state that changes on click. Change state then show how state remains the same.
      - Once finished remove code that just demonstrates HMR
  - Now talk about how the paths will be a pain when each component has its own folder
    - ie import Header from '../../components'
    - Fix by adding resolve root to webpack base
    - Remove all ./ and ../ from imports
home
  - this.props.children in MainContainer.js
  - In containers Make Home folder with HomeContainer.js
  - Build out HomeContainer.js
  - Make components folder
  - Build out Home.js
  - Make index.js for components Folder and export Home
  - Add HomeContainer as IndexRoute in route config
  - Reset on styling using sharedStyles
  - Add styling to Home.js
  - Create Navigation folder in components
  - Build Navigation.js (no styling)
  - Add <Navigation isAuthed={true} to MainContainer
  - Style Home and Navigation components
login-register-mocks
  - Create Register folder in containers, registerContainer.js file
  - Create Register folder in components, Register.js file
  - Add both to both index.js files
  - Add styling for Register component
  - Create shared folder in components for FacebookAuthBtn
  - Create FacebookAuthBtn component and style it
  - Create index.js file in shared folder which exports FacebookAuthBtn
  - Import and use FacebookAuthBtn in Register.js
  - Repeat the above steps with Login
redux-auth
  - Review what weve covered with Redux thus far (reducers.js and actions.js)
  - Show typical file structure for a Redux app (https://github.com/reactjs/react-router-redux/tree/master/examples/basic)
  - Talk about Ducks
  - Create redux folder & redux/modules folder
  - create redux/modules/users.js file
  - Move users from reducers.js to users.js file
  - Swap strings for constants and update initialState variable
  - export default the reducer
  - Now move users actions into users.js from actions.js. Talk about actionCreators
  - Talk about how well import both action creators and reducer (since reducer is default and rest arent)
  - DONT talk thunk yet. Let them see the problem first.
  - Now that we have our first reducer, we can create our Redux store.
  - In /app/index.js import the users reducer
  - Now we need to use createStore on the redux module
  - npm install --save redux
  - create the store using createStore(users) and then console.log the store to check it out
  - Talk about each property
  - call getState to see the state and talk about it.
  - Talk about how until this point weve just used "vanilla flux". This all could have been done without React.
  - Now, we want to make sure each component has access to the store, which is where react-redux and Provider come in.
  - npm install --save react-redux
  - Talk again how if we needed the store, we would have to pass it down as props. Thats lame. Provider fixes that
  - With Provider, we will be able to have each component specificy which part of the state it needs from the store
  - Import Provider
  - Wrap routes in Provider and pass it the store
  - Note that nothing is different. Cause we havent "connected" any components
  - **Currently here. No components to connect. Debate should I have created the Login/Register components before this section? That introduces Firebase though. Im tired.

  - Do this later
  - First, add a index.js file to /reducers just like we did for /components and /containers which exports every reducer well make
  - create index.js in /reducers and have it export users.js
  - Now in /app/index.js import all reducers with import * as reducers from 'redux/reducers'
  - DONT use combine reducers yet